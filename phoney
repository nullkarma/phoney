#!/usr/bin/env python

"""
Usage:
    phoney [options] search (vendor|addr) <value>...
    phoney [options] set <interface> to (vendor|addr) <value>...
    phoney [options] set <interface> to random
    phoney [options] update
    phoney (-h | --help )
    phoney --version

    Options:
        --db=<database>            Database to use [default: /usr/local/lib/phoney/oui.db]
        --dryrun                   Dry run [default: False]
"""

from collections import defaultdict
from random import choice as choose_from
from clint.textui import progress, colored, indent, prompt, puts
from tempfile import mktemp
from os import remove, path, makedirs
from subprocess import Popen, PIPE
from platform import system
import re
import requests
import sys
import shlex
import netifaces
import simplejson
from docopt import docopt


VALID_CHARS = 'ABCDEF0123456789'
# ieee.org was reeeeealy slow. Took 45m to download 3.4mb
#OUI_URI = 'http://standards-oui.ieee.org/oui/oui.txt'
OUI_URI = 'http://linuxnet.ca/ieee/oui.txt'

OUI_HEX_PATTERN = re.compile(r'^([0-9A-F-]+)\s+\(hex\)\s+(\w+.*)$')
MAC_PATTERN = re.compile(r'^([A-F0-9]{2}:?){5}[A-F0-9]{2}$')


class Database(object):
    def __init__(self, database, flush=True):
        self._db_path = database
        db_path, db_name = path.split(database)

        if not path.exists(path.abspath(db_path)):
            makedirs(db_path)

    def __enter__(self):
        try:
            with open(path.abspath(self._db_path), 'rb') as fd:
                self._db = simplejson.load(fd)
        except IOError:
            self._db = dict()
        return self

    def __exit__(self, *args):
        with open(self._db_path, 'wb') as fd:
            self._db = simplejson.dump(self._db, fd)

    def __iter__(self):
        return iter(self._db)

    def __getitem__(self, item):
        return self._db.get(item)

    def __setitem__(self, key, value):
        self._db[key] = value

    def keys(self):
        return self._db.keys()

    def iteritems(self):
        for k,v in self._db.iteritems():
            yield k, v

    def push(self, key, value):
        self._db[key] = value

    def pop(self, key, value):
        if isinstance(self._db[key], list):
            try:
                return self._db[key].pop(self._db[key].index(value))
            except ValueError:
                pass

    def drop(self, key):
        del self._db[key]

    def find(self, value):
        for k, v in self._db.iteritems():
            if value.upper() not in v:
                continue

            return k


class Phoney(object):
    def __init__(self, interface, database, dryrun, **kwargs):
        self._db_path = database
        self.dryrun = dryrun
        self.interface = interface

        if not path.exists(database):
            self.updatedb()

    def _download_ouis(self):
        tmpfile = mktemp()
        stream = requests.get(OUI_URI, stream=True)
        with open(tmpfile, 'wb') as fd_oui:
            total_length = stream.headers.get('content-length')
            if total_length is None:
                # 3,415,436 bytes
                total_length = 4000000
            for chunk in progress.bar(stream.iter_content(chunk_size=1024), expected_size=(total_length / 1024) + 1):
                if chunk:
                    fd_oui.write(chunk)

        return tmpfile

    def _hwaddr(self):
        try:
            return netifaces.ifaddresses(self.interface)[netifaces.AF_LINK][0].get('addr').upper()
        except ValueError, e:
            print colored.red(str(e))
            sys.exit(1)

    def _set_mac(self, macaddr):
        if system() == 'Linux':
            cmd = "ifconfig {} hw ether {}".format(self.interface, macaddr)
        elif system() == 'Darwin':
            cmd = "ifconfig {} ether {}".format(self.interface, macaddr)
        else:
            print colored.red('Unsupported operating system')
            sys.exit(1)

        print colored.white("Old MAC address: " + colored.yellow(self._hwaddr()))
        if self.dryrun:
            print colored.magenta("Would have run: ") + colored.white(cmd)
        else:
            stdout, stderr = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE).communicate()
            if stderr:
                print stderr

        print colored.white("New MAC address: " + colored.green(macaddr.upper()))

    def updatedb(self):
        vendors = defaultdict(list)

        oui_txt = self._download_ouis()
        with open(oui_txt, 'rb') as fd_oui:
            for line in fd_oui:
                if not OUI_HEX_PATTERN.match(line):
                    continue

                oui, vendor = OUI_HEX_PATTERN.match(line).groups()
                vendors[vendor.replace('\r', '')].append(oui.replace('-', ':'))

        with Database(self._db_path) as db:
            for vendor, ouis in vendors.iteritems():
                db.push(vendor, ouis)

        remove(oui_txt)
        print colored.green('Update completed.')

    def validate_macaddr(self, addrs):
        for addr in addrs:
            if not MAC_PATTERN.match(addr.upper()):
                print colored.white(addr), colored.red("is not a valid MAC Address")
                continue

            yield addr

    def random_nic(self, oui):
        valid_nic = ''.join([choose_from(VALID_CHARS) for i in range(6)])
        return "{}:{}".format(oui, ':'.join(re.findall(r'..', valid_nic)))

    def random_vendor(self):
        vendor, ouis = choose_from([(v, ouis) for v, ouis in self.search_vendor('')])
        self._set_mac(self.random_nic(choose_from(ouis)))
        print colored.magenta("Pretending to be: ") + colored.green(vendor)

    def search_oui(self, addrs):
        ouis = [mac for mac in self.validate_macaddr(addrs)]
        with Database(self._db_path) as db:
            for mac in ouis:
                oui, nic = mac[:8], mac[9:]
                vendor = db.find(oui)
                if vendor:
                    print "{} is {} branded".format(colored.green(mac), colored.green(vendor))
                else:
                    print "{} is {}".format(colored.green(mac), colored.red('Unknown'))

    def search_vendor(self, vendor):
        re_search = re.compile(r'^.*' + re.escape(vendor) + '.*$', re.I)
        with Database(self._db_path) as db:
            vendors = [(vendor_name, vendor_ouis) for vendor_name, vendor_ouis in db.iteritems() if re_search.match(vendor_name)]

        if not vendors:
            print colored.red("{} not found.".format(vendor))
            sys.exit(1)

        return vendors

    def pick_vendor(self, vendors):
        if len(vendors) > 1:
            print colored.green("Found more than one match!")
            options = [{'selector': i, 'prompt': vendor[0], 'return': vendor[0]} for i, vendor in enumerate(vendors)]
            choice = prompt.options("Pick a vendor:", options)
            for k, v in vendors:
                if k != choice:
                    continue

                random_oiu = choose_from(v)
        else:
            random_oiu = choose_from(vendors[0][1])

        return random_oiu

    def set_vendor_mac(self, vendor):
        self._set_mac(self.random_nic(self.pick_vendor(self.search_vendor(vendor))))

    def set_users_mac(self, addr):
        try:
            mac = [m for m in self.validate_macaddr(addr)][0]
        except IndexError:
            sys.exit(1)

        self._set_mac(mac)


def prettify(content):
    for a, b in content:
        print colored.green(a)
        with indent(4):
            for i in b:
                puts(colored.white(i))


if __name__ == '__main__':
    args = docopt(__doc__, version='0.1.0')
    phoney = Phoney(args['<interface>'], args['--db'], args['--dryrun'])

    if args['search'] and args['vendor']:
        prettify(phoney.search_vendor(' '.join(args['<value>'])))

    elif args['search'] and args['addr']:
        phoney.search_oui(args['<value>'])

    if args['set'] and args['to'] and args['vendor']:
        phoney.set_vendor_mac(' '.join(args['<value>']))

    if args['set'] and args['to'] and args['addr']:
        phoney.set_users_mac(args['<value>'])

    if args['set'] and args['to'] and args['random']:
        phoney.random_vendor()
    if args['update']:
        phoney.updatedb()

