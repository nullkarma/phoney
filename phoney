#!/usr/bin/env python

from collections import defaultdict
from argparse import ArgumentParser
from random import choice as choose_from
from clint.textui import progress, puts, colored, indent, prompt
from tempfile import mktemp
from os import remove, path, makedirs
from subprocess import Popen, PIPE
import re
import shelve
import requests
import sys
import shlex
import netifaces


VALID_CHARS = 'ABCDEF0123456789'
# ieee.org was reeeeealy slow. Took 45m to download 3.4mb
#OUI_URI = 'http://standards-oui.ieee.org/oui/oui.txt'
OUI_URI = 'http://linuxnet.ca/ieee/oui.txt'

OUI_HEX_PATTERN = re.compile(r'^([0-9A-F-]+)\s+\(hex\)\s+(\w+.*)$')
MAC_PATTERN = re.compile(r'([A-F0-9]{2}:?){6}')


class DBM(object):
    def __init__(self, database):
        db_path, db_name = path.split(database)
        if db_path:
            if not path.exists(db_path):
                makedirs(db_path)
            db = database
        else:
            db = path.abspath(path.curdir) + '/' + database

        self.database = db.rsplit('.', 1)[0]

    def __enter__(self):
        self.dbm = shelve.open(self.database)
        return self.dbm

    def __exit__(self, *args):
        self.dbm.close()


class Phoney(object):
    def __init__(self, interface, db, manufacturer, lookup, mac, list_oui, dryrun, update_db, **kwargs):
        self.interface = interface
        self.database = db
        self.dryrun = dryrun
        self.searchstring = ' '.join(manufacturer) if manufacturer is not None else ''
        self.list_oui = list_oui
        self.update_db = update_db
        self.lookup = lookup
        try:
            self.mac = MAC_PATTERN.match(mac.upper()).group() if mac is not None else ''
        except AttributeError:
            raise AttributeError(colored.red("MAC or OUI is invaid"))

    def _hwaddr(self):
        try:
            return netifaces.ifaddresses(self.interface)[netifaces.AF_LINK][0].get('addr').upper()
        except ValueError, e:
            puts(colored.red(str(e)))
            sys.exit(1)

    def _set_mac(self, macaddr):
        puts(colored.white("Current MAC address: " + colored.yellow(self._hwaddr())))

        cmd = "ifconfig {} hw ether {}".format(self.interface, macaddr)
        if self.dryrun:
            puts(colored.magenta("Would have run: ") + colored.white(cmd))
        else:
            stdout, stderr = Popen(shlex.split(cmd), stdout=PIPE, stderr=PIPE).communicate()
            if stderr:
                print stderr

        puts(colored.white("New MAC address: " + colored.green(macaddr)))

    def _download_ouis(self):
        tmpfile = mktemp()
        stream = requests.get(OUI_URI, stream=True)
        with open(tmpfile, 'wb') as fd_oui:
            total_length = stream.headers.get('content-length')
            if total_length is None:
                # 3,415,436 bytes
                total_length = 4000000
            for chunk in progress.bar(stream.iter_content(chunk_size=1024), expected_size=(total_length / 1024) + 1):
                if chunk:
                    fd_oui.write(chunk)

        return tmpfile

    def updatedb(self):
        vendors = defaultdict(list)

        raw_ouifile = self._download_ouis()

        with open(raw_ouifile, 'rb') as infile:
            for line in infile:
                if OUI_HEX_PATTERN.match(line):
                    oui, vendor = OUI_HEX_PATTERN.match(line).groups()
                    vendors[vendor.replace('\r', '')].append(oui.replace('-', ':'))

        with DBM(self.database) as db:
            for vendor, ouis in vendors.iteritems():
                db[vendor] = ouis

        remove(raw_ouifile)
        puts(colored.green('Update completed.'))

    def search_vendors(self):
        re_search = re.compile(r'^.*' + self.searchstring + '.*$', re.I)
        with DBM(self.database) as dbm:
            vendors = [(vendor, ouis) for vendor, ouis in dbm.iteritems() if re_search.match(vendor)]
        if not vendors:
            puts(colored.red("{} not found.".format(self.searchstring)))
            sys.exit(1)

        return vendors

    def pick_oui(self, vendor_data):
        oui = None
        if len(vendor_data) > 1:
            puts(colored.green("Found more than one match!"))
            # clint foo. Build a menu to choose from.
            options = [{'selector':i, 'prompt': vendor[0], 'return': vendor[0]} for i, vendor in enumerate(vendor_data)]
            choice = prompt.options("Pick a vendor:", options)

            for vendor, ouis in vendor_data:
                if choice != vendor:
                    continue
                oui = choose_from(ouis)
        else:
            __, oius = vendor_data[0]
            oui = choose_from(oius)

        return oui

    def random_nic(self, oui):
        valid_nic = ''.join([choose_from(VALID_CHARS) for i in range(6)])
        return "{}:{}".format(oui, ':'.join(re.findall(r'..', valid_nic)))

    def search_ouis(self):
        def iterfd():
            for mac in oui_fd:
                mac = re.sub(r'[\'\n]*', '', mac)
                self.match_ouis(mac, reverse_db)

        reverse_db = dict()
        for vendor, ouis in self.search_vendors():
            reverse_db[tuple(ouis)] = vendor

        for attr in self.lookup:
            if path.isfile(attr):
                with open(attr, 'rb') as oui_fd:
                    iterfd()

            elif isinstance(attr, basestring):
                self.match_ouis(attr, reverse_db)

            else:
                print "Unknown input {}".format(colored.red(attr))
                continue

    def match_ouis(self, mac, ouis):
        hits = list()
        try:
            if MAC_PATTERN.match(mac.upper()).groups():
                oui, nic = mac[:8], mac[9:]
        except AttributeError:
            raise AttributeError(colored.red("{} is not a valid Mac address".format(mac)))

        for vendor_oui, vendor_name in ouis.iteritems():
            if oui.upper() not in vendor_oui:
                continue

            hits.append(mac)
            puts(("{} is {} branded.".format(colored.white(mac), colored.green(vendor_name))))
        if mac not in hits:
            puts(("{} not found in Database.".format(colored.white(mac))))

    def parse(self):
        if not path.isfile(self.database):
            self.updatedb()

        if self.update_db:
            self.updatedb()
            sys.exit(0)

        if self.lookup:
            self.search_ouis()
            sys.exit(0)

        if (self.searchstring and self.list_oui) or self.list_oui:
            prettify(self.search_vendors())

        elif self.searchstring:
            vendor = self.pick_oui(self.search_vendors())
            mac = self.random_nic(vendor)
            self._set_mac(mac)

        elif self.mac:
            self._set_mac(self.mac)

        else:
            vendor, ouis = choose_from([(v,ouis) for v, ouis in self.search_vendors()])
            mac = self.random_nic(choose_from(ouis))
            self._set_mac(mac)
            puts(colored.magenta("Pretending to be: ") + colored.green(vendor))


def prettify(content):
    for a, b in content:
        puts(colored.green(a))
        with indent(4):
            for i in b:
                puts(colored.white(i))

if __name__ == '__main__':

    parser = ArgumentParser()
    parser.add_argument('interface', help='The interface to configure.')
    parser.add_argument('-M', '--manufacturer', nargs='*', metavar='Manufacturer', help='Manufacturer name (eg. Apple Inc.)')
    parser.add_argument('-m', '--mac', help='Set specified MAC address')
    parser.add_argument('-d', '--db', default='/usr/local/lib/phoney/oui.db', metavar='/path/to/db')
    parser.add_argument('-l', '--list-oui', action='store_true', help='List all ouis from Manufacturer')
    parser.add_argument('-o', '--lookup', nargs='+', help='List of OUIs to seach in the Database. Can be eather a file or list')
    parser.add_argument('--dryrun', action='store_true')
    parser.add_argument('--update-db', action='store_true', help="Update Database. Download from {}".format(OUI_URI))

    arguments = vars(parser.parse_args())
    phoney = Phoney(**arguments)
    phoney.parse()
